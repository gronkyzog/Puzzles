answerhash ={1: -159953675, 2: -1337476823, 3: 634321538, 4: -238341804, 5: 753095037, 6: 1351160084, 7: -1743337591, 8: 1093105187, 9: 1874546920, 10: -264753205, 11: -263940300, 12: -2063310768, 13: 1704506793, 14: 46596381, 15: 486739416, 16: -1841258512, 17: -203791093, 18: 288568874, 19: 1914471198, 20: -1689962247, 21: 159346043, 22: -1301108849, 23: -1345430900, 24: -302236429, 25: 311857181, 26: 1306738313, 27: 1009886685, 28: -337253366, 29: 2061682069, 30: -1631931625, 31: -1269565733, 32: -1441719226, 33: 1913471194, 34: -941409653, 35: -1820891544, 36: -1918447019, 37: 648085668, 38: -577371834, 39: 315838183, 40: -1377595898, 41: 775481229, 42: 1915471198, 43: -321517947, 44: -681175948, 45: -2070328537, 46: -1438517026, 47: 430286853, 48: -329506182, 49: 346493636, 50: -1088424695, 51: -175049457, 52: -488646809, 53: -418522776, 54: -370695553, 55: -1382595876, 56: 1315738405, 57: 1916471170, 58: 423407218, 59: -1225753835, 60: 1873167167, 61: 1096343445, 62: 1191128843, 63: 320429991, 64: -1845258624, 65: -1383595886, 66: -1691962354, 67: -1019052319, 68: -822475901, 69: 820948118, 70: -129217803, 71: -1000810132, 72: 1873826173, 73: 1972526976, 74: 627204661, 75: 544226087, 76: 66988509, 77: -1808567338, 78: -1014269631, 79: -1962979558, 80: 1099105175, 81: 112758924, 82: 105762371, 83: -221208537, 84: -2081798851, 85: -2090185078, 86: -1129503316, 87: 361002342, 88: -1583977558, 89: -695062141, 90: 1725328709, 91: 1292102851, 92: -314539968, 93: 1729328830, 94: -1205811626, 95: 2013482842, 96: -1945075074, 97: -1084480518, 98: 899548672, 99: -691062139, 100: 622892433, 101: 950234177, 102: -1380595881, 103: 669923894, 104: -45231208, 105: -1982945606, 106: -1672551089, 107: 1527818000, 108: -1777393684, 109: -509590563, 110: -1713902014, 111: -359046529, 112: 1926004740, 113: -1954270880, 114: -403589693, 115: 1915471188, 116: -2103372754, 117: 757698232, 118: 755279299, 119: -375489956, 120: 1008968227, 121: 37642419, 122: -1904571096, 123: -930171068, 124: 1957348836, 125: 1491150400, 126: -1920658499, 127: -8830877, 128: -882622040, 129: 1370203943, 130: -211498032, 131: 1914471196, 132: 1109948724, 133: -1052723076, 134: -1462493131, 135: 265169464, 136: 1116110045, 137: 748206199, 138: 299853055, 139: 2024663979, 140: 1823734444, 141: -313661044, 142: -1056590859, 143: 710084114, 144: -372695565, 145: 981857817, 146: 1612721224, 147: -1639941589, 148: 1853585163, 149: 181979617, 150: 1345707859, 151: 387883633, 152: -375695671, 153: -797339033, 154: -39671727, 155: -2073947793, 156: 885289376, 157: 1832663630, 158: 923172653, 159: -308421541, 160: -704319400, 161: -2054025694, 162: 842687628, 163: -1526466399, 164: 1274906902, 165: 1183315481, 166: -654176607, 167: 1915934610, 168: 1737492771, 169: 1693833284, 170: 560124925, 171: -933624794, 172: -1605693253, 173: -1625626584, 174: -1583617618, 175: -577280228, 176: 107511936, 177: -428846020, 178: -2004192264, 179: 1491909301, 180: 855593853, 181: -1958935528, 182: 1977591059, 183: 1799903533, 184: 772748207, 185: -1317055268, 186: 1246530936, 187: 1117406954, 188: -1760667499, 189: 1654434567, 190: -813067971, 191: -1233584420, 192: 58165419, 193: 1375975438, 194: -572463511, 195: 212853190, 196: -280361473, 197: -2111607313, 198: 116845988, 199: -422165243, 200: -1509074193, 201: -718236094, 202: 1929036904, 203: 473758010, 204: 1326037008, 205: -1651483350, 206: 366220169, 207: -1703072330, 208: 1267076624, 209: 428819811, 210: 203417988, 211: 1104897368, 212: 2033195811, 213: -55047932, 214: -423723048, 215: 1565790518, 216: 240859153, 217: 1970175837, 218: 1849051185, 219: -1458844725, 220: -856978543, 221: 2116203341, 222: -152220301, 223: -2116511932, 224: 445181592, 225: -1435117573, 226: 773613904, 227: -153841430, 228: -145554771, 229: 1917482773, 230: 1666786133, 231: 836571158, 232: -580405699, 233: -282735226, 234: 481483157, 235: -1598315247, 236: 1306802951, 237: 1605735508, 238: 2124484065, 239: -982845948, 240: 1507382098, 241: -119262901, 242: -865747460, 243: -502804599, 244: 278580283, 245: 851606495, 246: 1380829574, 247: 1170196754, 248: 2243775, 249: -1008558816, 250: -1158391895, 251: 1554562972, 252: -1431299306, 253: -99724403, 254: -98775378, 255: 691196852, 256: 2129149819, 257: -951314371, 258: 2135249939, 259: 1272274917, 260: -1985389028, 261: 846729834, 262: -821442610, 263: -1877005442, 264: -1493243792, 265: -821852100, 266: 1522851670, 267: 407688254, 268: 481345485, 269: 1377384334, 270: -984965582, 271: 1615403596, 272: -1111130457, 273: 2083135139, 274: 1836666088, 275: -1470572570, 276: 1431379963, 277: -290436634, 278: -112854992, 279: 70297239, 280: -1223400686, 281: -1932335290, 282: 732033084, 283: 265627535, 284: -1160877925, 285: -1111410024, 286: -2139734709, 287: -369296044, 288: 666456129, 289: -1315010345, 290: 746828980, 291: -2074475840, 292: -424576133, 293: 39642409, 294: -1800975382, 295: 694390262, 296: -751020458, 297: -859472210, 298: -22875901, 299: 859944162, 300: -896869938, 301: 146366911, 302: 1948585952, 303: 16226445, 304: -37904633, 305: -577140168, 306: 1771122349, 307: 997702445, 308: 1474496669, 309: -1350076508, 310: -1166023582, 311: 1894785060, 312: -988562773, 313: 1121208723, 314: -1128467809, 315: 214302803, 316: 569169739, 317: 1424504388, 318: -1965503833, 319: 20167151, 320: 1736511867, 321: 302534623, 322: -566861718, 323: 937637072, 324: -1140776479, 325: 749659782, 326: -779463620, 327: -658865213, 328: -887373732, 329: 1400171260, 330: 908268203, 331: -1585662383, 332: 410672451, 333: 901492392, 334: -476963614, 335: -711457951, 336: -1002954295, 337: 503082483, 338: -1114456734, 339: 826698592, 340: 1570682265, 341: 238348844, 342: -1941393965, 343: -1612653455, 344: 7599254, 345: -836218347, 346: -1792224176, 347: 1018104683, 348: -975989593, 349: -1880223884, 350: 270029530, 351: 43973681, 352: 297657405, 353: 1198824915, 354: -572641686, 355: -983875107, 356: -1144871692, 357: 1788604991, 358: -1340007858, 359: -215221448, 360: 1952802698, 361: -1514552903, 362: -507093201, 363: 2068971504, 364: 1149193103, 365: -1269609809, 366: 1731183067, 367: 1170606348, 368: -78555768, 369: -1305939766, 370: 824293134, 371: -402936682, 372: -152374103, 373: 1692785946, 374: -1360294839, 375: -1976151426, 376: 1533949718, 377: 1506664635, 378: -290071486, 379: 1845956312, 380: -982558921, 381: 274737815, 382: -81379074, 383: -819980048, 384: 660973442, 385: -1693588632, 386: 198348625, 387: -2058734799, 388: -74823350, 389: -1063577928, 390: -820896008, 391: 2026337957, 392: -97785180, 393: -1929795910, 394: 1802477806, 395: -1431328795, 396: -1800132609, 397: -266808119, 398: 823270823, 399: 1293214334, 400: -514802390, 401: -51322168, 402: 1092145553, 403: 1996163156, 404: 1579956940, 405: 1848857022, 406: -1105053170, 407: -2134408071, 408: 971586963, 409: 1846140703, 410: -1515000756, 411: 61363010, 412: 1417610988, 413: -665452521, 414: -621306042, 415: 1201420957, 416: -1658140764, 417: 991971350, 418: 695804799, 419: -1767743448, 420: 388525428, 421: -1082082829, 422: 716296653, 423: 553995063, 424: -1642496187, 425: 508019600, 426: -572670202, 427: -277329159, 428: -460398698, 429: 868107858, 430: 2032759049, 431: -2051499986, 432: -474728651, 433: 581886088, 434: 589308490, 435: 594616894, 436: 1044562043, 437: -1026913344, 441: 1801338412, 442: 1725285580, 443: -2109962653, 444: -623747982, 448: 679141699, 449: -1528741956, 451: -1645091353, 452: 474623063, 454: -1599122671, 455: -269711274, 456: 2060671585, 457: -1627729898, 460: -1871586498, 461: -1644501915, 463: -1830614052, 469: -1042699223, 473: -902123549}

import math

def product(A):
	output = 1
	for a in A:
		output *= a
	return output

def primesieve(n):
	output = [0 for i in xrange(n+1)]
	for k in range(4,n+1,2):
		output[k] = 1

	#for s in range(3,(n/2)+1,2):
		#for k in xrange(3*s,n+1,2*s):
	for s in range(3,int(math.sqrt(n))+1,2):
		if output[s]==1:
			continue
		for k in xrange(s*s,n+1,2*s):
			output[k] = 1
	return [i for i,x in enumerate(output) if x==0 and i>=2]


def primesieve2(n):
	output = [0 for i in xrange(n+1)]
	for k in range(4,n+1,2):
		output[k] = 1

	for s in range(3,(n/2)+1,2):
		for k in xrange(3*s,n+1,2*s):
			output[k] = 1
	return [i for i,x in enumerate(output) if x==0 and i>=2]


def factors(n,P=None):
	if P is None:
		P = primesieve(n)

	output = [[] for i in xrange(n+1)]

	for p in P:
		for k in range(1,n):
			q = p**k
			if q > n:
				break
			for s in range(q,n+1,q):
				output[s].append(p)

	return output


def mobius(n,P=None):
	if P is None:
		P = primesieve(n)
	output = [1 for i in xrange(n+1)]
	for p in P:
		for s in range(p,n+1,p):
				output[s] *= -1

		q = p**2
		if q <= n:
			for s in range(q,n+1,q):
				output[s]=0

	output[1] = 1
	return output







def factorise(P,x):
	r = x
	output = []
	for p in P:
		while True:
			k,q = divmod(r,p)
			if q != 0:
				break
			r = k
			output.append(p)
	return output


def gcd(a,b):
    while b != 0:
        a,b = b,a % b
    return a

def extended_gcd(a, b):
    x,lastx = 0,1
    y,lasty = 1,0
    while b != 0:
        quotient,_ = divmod(a,b)
        a, b = b, a % b
        (x, lastx) = (lastx - quotient*x, x)
        (y, lasty) = (lasty - quotient*y, y)       
    return (lastx, lasty)

def invmod(a,p):
    x,y = extended_gcd(a,p)
    if  x*a + y*p != 1:
        raise Exception('No inverse: %d mod %d' %(a,p))
    return x


def _try_composite(a, d, n, s):
    if pow(a, d, n) == 1:
        return False
    for i in range(s):
        if pow(a, 2**i * d, n) == n-1:
            return False
    return True # n  is definitely composite
 
def is_prime(n, _precision_for_huge_n=16):
    if n in _known_primes or n in (0, 1):
        return True
    if any((n % p) == 0 for p in _known_primes):
        return False
    d, s = n - 1, 0
    while not d % 2:
        d, s = d >> 1, s + 1
    # Returns exact according to http://primes.utm.edu/prove/prove2_3.html
    if n < 1373653: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3))
    if n < 25326001: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5))
    if n < 118670087467: 
        if n == 3215031751: 
            return False
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7))
    if n < 2152302898747: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11))
    if n < 3474749660383: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13))
    if n < 341550071728321: 
        return not any(_try_composite(a, d, n, s) for a in (2, 3, 5, 7, 11, 13, 17))
    # otherwise
    return not any(_try_composite(a, d, n, s) 
                   for a in _known_primes[:_precision_for_huge_n])
 
_known_primes = [2, 3]
_known_primes += [x for x in range(5, 1000, 2) if is_prime(x)]


def legendre_symbol(a,p):
    z = pow(a,(p-1)/2,p)
    return z

def qssplit(p):
    q=p-1
    s=0
    while q %2 ==0:
        q /=2
        s +=1
    return q,s

def modsqrt_prime(n,p):
    if n%p==0:
        return set([0])
    if legendre_symbol(n,p) != 1:
        return set([])
    
    if p ==2:
        return set([n%2])

    z=2
    while legendre_symbol(z,p)==1:
        z +=1

    if p  % 4 == 3:
        r = pow(n,(p+1)/4,p)
        return set([r,p-r])

    s,q = 0,p-1
    while q % 2 ==0:
        s = s+1
        q  /=2

    r = pow(n,(q+1)/2,p)
    t = pow(n,q,p)
    c = pow(z,q,p)
    m = s
    while  t != 1:
        w = t
        i = 0
        while w!=1:
            w = pow(w,2,p)
            i +=1
        b = pow(c,2**(m-i-1),p)
        r = r*b % p 
        t = (t*b*b) %p 
        c = b*b
        m = i

    return set([r,p-r])

